#!/usr/bin/env zsh

# Original Source: Syndrizzle/hotfiles (bspwm)

mkdir -p $HOME/.cache/eww/notification

function _set_vars() {
  typeset -gx DUNST_CACHE_DIR="$HOME/.cache/eww/notification"
  typeset -gx DUNST_LOG="$DUNST_CACHE_DIR/notifications.txt"
  typeset -gx ICON_THEME="Papirus"
}
_set_vars

function _unset_vars() {
  unset DUNST_CACHE_DIR
  unset DUNST_LOG
}

mkdir "$DUNST_CACHE_DIR" 2>/dev/null
touch "$DUNST_LOG" 2>/dev/null

function create_cache() {
  local urgency
  case "$DUNST_URGENCY" in
    "LOW"|"NORMAL"|"CRITICAL") urgency="$DUNST_URGENCY";;
    *) urgency="OTHER";;
  esac

  local summary
  local body
  [ "$DUNST_SUMMARY" = "" ] && summary="" || summary="$DUNST_SUMMARY"
  [ "$DUNST_BODY" = "" ] && body="" || body="$(print "$DUNST_BODY" | perl -n -mHTML::Entities -e ' ; print HTML::Entities::decode_entities($_) ;')"
  
  summary=$(echo $summary | awk '{printf "%s%s",sep,$0; sep="\\\\n"} END{print ""}') # replace newline with '\\n'
  body=$(printf $body | awk '{printf "%s%s",sep,$0; sep="\\\\n"} END{print ""}')

  local glyph
  case "$urgency" in
    "LOW") glyph="";;
    "NORMAL") glyph="";;
    "CRITICAL") glyph="";;
    *) glyph="";;
  esac

  if [[ $DUNST_ICON_PATH == "" ]]
  then
    LOWERCASE_APP_NAME=$(echo $DUNST_APP_NAME | awk '{print tolower($0)}')
    ICON_PATH=/usr/share/icons/Papirus/128x128/apps/$LOWERCASE_APP_NAME.svg
  else
    FIXED_ICON_PATH=$(echo ${DUNST_ICON_PATH} | sed 's/32x32/48x48/g')
    ICON_PATH=$FIXED_ICON_PATH
  fi


  # pipe stdout -> pipe cat stdin (cat conCATs multiple files and sends to stdout) -> absorb stdout from cat
  # concat: "one" + "two" + "three" -> notice how the order matters i.e. "one" will be prepended
  printf '(notification-card :class "notification-card notification-card-'$urgency' notification-card-'$DUNST_APP_NAME'" :SL "'$DUNST_ID'" :L "dunstctl history-pop '$DUNST_ID'" :body "%s" :summary "%s" :image "'$ICON_PATH'" :application "'$DUNST_APP_NAME'")\n' \
    $body $summary \
    | cat - "$DUNST_LOG" \
    | sponge "$DUNST_LOG"
}

function compile_caches() { tr '\n' ' ' < "$DUNST_LOG" }

function make_literal() {
  local caches=$(compile_caches)
  [[ "$caches" == "" ]] \
    && print '(box :class "notifications-empty-box" :vexpand true :orientation "vertical" :space-evenly "false" (label :vexpand true :valign "start" :wrap true :class "notifications-empty-label" :text "No Notifications"))' \
    || printf "(scroll :vexpand true :vscroll true (box :orientation 'vertical' :class 'notification-scroll-box' :spacing 20 :space-evenly 'false' %s))\n" $caches
}

function clear_logs() {
  killall dunst 2>/dev/null
  dunst & disown
  print > "$DUNST_LOG"
}

function pop() { sed -i '1d' "$DUNST_LOG" }

function drop() { sed -i '$d' "$DUNST_LOG" }

function remove_line() { sed -i '/SL "'$1'"/d' "$DUNST_LOG" }

function subscribe() {
  make_literal
  local lines=$(cat $DUNST_LOG | wc -l)
  while sleep 0.1; do
    local new=$(cat $DUNST_LOG | wc -l)
    [[ $lines -ne $new ]] && lines=$new && print
  done | while read -r _ do; make_literal done
}

case "$1" in
  "pop") pop;;
  "drop") drop;;
  "clear") clear_logs;;
  "subscribe") subscribe;;
  "rm_id") remove_line $2;;
  *) create_cache;;
esac

sed -i '/^$/d' "$DUNST_LOG"
_unset_vars